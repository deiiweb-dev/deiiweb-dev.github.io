function openCalculator() {
  alert('–ú–∏–Ω–∏-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å!');
} 

// --- –ö–≤–∏–∑-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä ---
const quizModal = document.getElementById('quiz-modal');
const quizStepContainer = document.getElementById('quiz-step-container');
const quizCloseBtn = document.getElementById('quiz-close-btn');
const quizOpenBtn = document.querySelector('.hero__btn');
const quizAuditBtn = document.querySelector('.cta__btn--secondary');

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —É—Å–ª—É–≥ –ø–æ –±–ª–æ–∫–∞–º
const QUIZ_BLOCKS = [
  {
    key: 'design',
    label: '–î–∏–∑–∞–π–Ω & –ë—Ä–µ–Ω–¥–∏–Ω–≥',
    services: [
      { name: '–í–∏–∑–∏—Ç–∫–∏, –±—É–∫–ª–µ—Ç—ã, —Ñ–ª–∞–µ—Ä—ã, –±–∞–Ω–Ω–µ—Ä—ã', desc: '–ü–µ—á–∞—Ç—å –∏ –¥–∏–∑–∞–π–Ω –ø–æ–ª–∏–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –ª—é–±—ã—Ö –∑–∞–¥–∞—á' },
      { name: '–ü—Ä–∞–π—Å-–ª–∏—Å—Ç—ã, –±–ª–∞–Ω–∫–∏, –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏', desc: '–î–æ–∫—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–¥–∞—é—Ç' },
      { name: '–õ–æ–≥–æ—Ç–∏–ø—ã –∏ –§–∏—Ä–º–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å', desc: '–°–æ–∑–¥–∞–¥–∏–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑ –∏ —É–∑–Ω–∞–≤–∞–µ–º—ã–π —Å—Ç–∏–ª—å' },
      { name: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏', desc: '–î–∏–∑–∞–π–Ω, –∫–æ–Ω—Ü–µ–ø—Ü–∏—è, –≤–µ–¥–µ–Ω–∏–µ. –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è —Ä–æ—Å—Ç–∞' },
      { name: '–î—Ä—É–≥–æ–µ', desc: '–ï—Å—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —É—Å–ª—É–≥—É? –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –∏ –æ–±—Å—É–¥–∏–º –¥–µ—Ç–∞–ª–∏!' },

    ]
  },
  {
    key: 'web',
    label: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –°–∞–π—Ç–æ–≤',
    services: [
      { name: '–°–∞–π—Ç-–≤–∏–∑–∏—Ç–∫–∞', desc: '–õ–∞–∫–æ–Ω–∏—á–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏' },
      { name: '–õ–µ–Ω–¥–∏–Ω–≥', desc: '–ü—Ä–æ–¥–∞—é—â–∏–µ –æ–¥–Ω–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–∏–∫–∏' },
      { name: '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–∞–π—Ç', desc: '–ú–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –±–∏–∑–Ω–µ—Å–∞' },
      { name: '–ö–∞—Ç–∞–ª–æ–≥–∏ –∏ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω—ã', desc: '–£–¥–æ–±–Ω—ã–µ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ' },
      { name: '–î—Ä—É–≥–æ–µ', desc: '–ï—Å—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —É—Å–ª—É–≥—É? –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –∏ –æ–±—Å—É–¥–∏–º –¥–µ—Ç–∞–ª–∏!' },

    ]
  },
  {
    key: 'it',
    label: 'IT-–£—Å–ª—É–≥–∏ & –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è',
    services: [
      { name: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤/—Å–µ—Ç–µ–π. –°–∏—Å—Ç–µ–º–Ω–æ–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ', desc: '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è' },
      { name: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ü–û, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä—É—Ç–∏–Ω—ã', desc: '–ü–æ–Ω—è—Ç–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã' },
      { name: '–î—Ä—É–≥–æ–µ', desc: '–ï—Å—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —É—Å–ª—É–≥—É? –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –∏ –æ–±—Å—É–¥–∏–º –¥–µ—Ç–∞–ª–∏!' },

    ]
  }
];

// --- –ò–∫–æ–Ω–∫–∏ –¥–ª—è —É—Å–ª—É–≥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º ---
const SERVICE_ICONS = {
  design: ['üé®','üìù','üåü','üì±','‚ûï'],
  web: ['üåê','üìÑ','üè¢','üõí','‚ûï'],
  it: ['üñ•Ô∏è','ü§ñ','‚ûï']
};

// --- –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Å–ø–æ—Å–æ–±–æ–≤ —Å–≤—è–∑–∏ ---
const CONTACT_ICONS = {
  sms: '<img src="image/icons8-messages.gif" class="quiz-contact-logo" alt="–°–ú–°">',
  call: '<img src="image/icons8-phone.gif" class="quiz-contact-logo" alt="–ó–≤–æ–Ω–æ–∫">',
  tg: '<img src="image/icons8-telegram.gif" class="quiz-contact-logo" alt="Telegram">',
  vk: '<img src="image/icons8-vk.gif" class="quiz-contact-logo" alt="VK">',
  wa: '<img src="image/icons8-whatsapp.gif" class="quiz-contact-logo" alt="WhatsApp">',
  viber: '<img src="image/icons8-viber.gif" class="quiz-contact-logo" alt="Viber">',
  email: '<img src="image/icons8-email.gif" class="quiz-contact-logo" alt="Email">',
};

// --- –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω —Å —Ñ–ª–∞–≥–∞–º–∏, dial-–∫–æ–¥–æ–º –∏ –º–∞—Å–∫–æ–π ---
const ALL_PHONE_COUNTRIES = [
  // –°–ù–ì
  { code: 'BY', name: '–ë–µ–ª–∞—Ä—É—Å—å', flag: 'üáßüáæ', dial: '+375', mask: '(00) 000-00-00', max: 9 },
  { code: 'RU', name: '–†–æ—Å—Å–∏—è', flag: 'üá∑üá∫', dial: '+7', mask: '(000) 000-00-00', max: 10 },
  { code: 'UA', name: '–£–∫—Ä–∞–∏–Ω–∞', flag: 'üá∫üá¶', dial: '+380', mask: '(00) 000-00-00', max: 9 },
  { code: 'KZ', name: '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω', flag: 'üá∞üáø', dial: '+7', mask: '(700) 000-00-00', max: 10 },
  { code: 'UZ', name: '–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω', flag: 'üá∫üáø', dial: '+998', mask: '(00) 000-00-00', max: 9 },
  { code: 'KG', name: '–ö–∏—Ä–≥–∏–∑–∏—è', flag: 'üá∞üá¨', dial: '+996', mask: '(000) 000-000', max: 9 },
  { code: 'AM', name: '–ê—Ä–º–µ–Ω–∏—è', flag: 'üá¶üá≤', dial: '+374', mask: '(00) 000-000', max: 8 },
  { code: 'AZ', name: '–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω', flag: 'üá¶üáø', dial: '+994', mask: '(00) 000-00-00', max: 9 },
  { code: 'MD', name: '–ú–æ–ª–¥–æ–≤–∞', flag: 'üá≤üá©', dial: '+373', mask: '(00) 000-000', max: 8 },
  { code: 'TJ', name: '–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω', flag: 'üáπüáØ', dial: '+992', mask: '(00) 000-00-00', max: 9 },
  { code: 'TM', name: '–¢—É—Ä–∫–º–µ–Ω–∏—Å—Ç–∞–Ω', flag: 'üáπüá≤', dial: '+993', mask: '(0X) 000000', max: 8 },
  // –ï–≤—Ä–æ–ø–∞ (–ø—Ä–∏–º–µ—Ä)
  { code: 'PL', name: '–ü–æ–ª—å—à–∞', flag: 'üáµüá±', dial: '+48', mask: '000-000-000', max: 9 },
  { code: 'DE', name: '–ì–µ—Ä–º–∞–Ω–∏—è', flag: 'üá©üá™', dial: '+49', mask: '0000 0000000', max: 11 },
  { code: 'FR', name: '–§—Ä–∞–Ω—Ü–∏—è', flag: 'üá´üá∑', dial: '+33', mask: '0X XX XX XX XX', max: 9 },
  { code: 'IT', name: '–ò—Ç–∞–ª–∏—è', flag: 'üáÆüáπ', dial: '+39', mask: '000 000 0000', max: 10 },
  { code: 'ES', name: '–ò—Å–ø–∞–Ω–∏—è', flag: 'üá™üá∏', dial: '+34', mask: '000 000 000', max: 9 },
  // ... (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã –º–∏—Ä–∞ –ø–æ ISO)
];

function getPhoneCountriesSorted() {
  const cngCodes = ['BY','RU','UA','KZ','UZ','KG','AM','AZ','MD','TJ','TM'];
  const cng = ALL_PHONE_COUNTRIES.filter(c=>cngCodes.includes(c.code));
  const rest = ALL_PHONE_COUNTRIES.filter(c=>!cngCodes.includes(c.code)).sort((a,b)=>a.name.localeCompare(b.name));
  return [...cng, ...rest];
}

// --- –ú–∞—Å–∫–∏ –¥–ª—è imaskjs –ø–æ —Å—Ç—Ä–∞–Ω–∞–º (–æ–±–Ω–æ–≤–ª–µ–Ω–æ) ---
const IMASK_PHONE = {};
getPhoneCountriesSorted().forEach(c => {
  IMASK_PHONE[c.code] = { mask: c.mask };
});

let quizState = {
  selectedBlocks: [], // [{key, label, services: [–∏–Ω–¥–µ–∫—Å—ã]}]
  contactMethod: '',
  contactValue: '',
  phoneCountry: 'BY',
};

function openQuiz() {
  quizModal.classList.add('active');
  document.body.style.overflow = 'hidden';
  quizState = { selectedBlocks: [], contactMethod: '', contactValue: '', phoneCountry: 'BY' };
  renderQuizStep1();
}
function closeQuiz() {
  quizModal.classList.remove('active');
  document.body.style.overflow = '';
}
quizOpenBtn.addEventListener('click', openQuiz);
if (quizAuditBtn) quizAuditBtn.addEventListener('click', function(e) { e.preventDefault(); openQuiz(); });
quizCloseBtn.addEventListener('click', closeQuiz);
quizModal.querySelector('.quiz-modal__backdrop').addEventListener('click', closeQuiz);

// --- –®–∞–≥ 1: –≤—ã–±–æ—Ä –±–ª–æ–∫–∞ ---
function renderQuizStep1() {
  quizStepContainer.innerHTML = `
    <div class="quiz-step-title">–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?</div>
    <div class="quiz-options">
      ${QUIZ_BLOCKS.map((b, i) => `<button class="quiz-option-btn" data-block="${b.key}">${b.label}</button>`).join('')}
    </div>
    <button class="quiz-next-btn" id="quiz-step1-next" disabled>–î–∞–ª–µ–µ</button>
  `;
  let selectedBlock = null;
  const btns = quizStepContainer.querySelectorAll('.quiz-option-btn');
  btns.forEach(btn => {
    btn.addEventListener('click', () => {
      btns.forEach(b => b.classList.remove('selected'));
      btn.classList.add('selected');
      selectedBlock = btn.getAttribute('data-block');
      quizStepContainer.querySelector('#quiz-step1-next').disabled = false;
    });
  });
  quizStepContainer.querySelector('#quiz-step1-next').addEventListener('click', () => {
    quizState.selectedBlocks = [{ key: selectedBlock, services: [] }];
    renderQuizStep2();
  });
}

// --- –®–∞–≥ 2: –≤—ã–±–æ—Ä —É—Å–ª—É–≥ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –±–ª–æ–∫–µ ---
function renderQuizStep2() {
  const block = QUIZ_BLOCKS.find(b => b.key === quizState.selectedBlocks[0].key);
  const selected = quizState.selectedBlocks[0].services || [];
  quizStepContainer.innerHTML = `
    <div class="quiz-step-title" style="color:#2563EB;">–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —É—Å–ª—É–≥–∏</div>
    <form id="quiz-services-form">
      <div class="quiz-checkbox-list">
        ${block.services.map((s, i) => `
          <label class="quiz-checkbox-label">
            <input type="checkbox" name="service" value="${i}" ${selected.includes(i) ? 'checked' : ''}>
            <span class="quiz-checkbox-custom">
              <svg width="16" height="16" viewBox="0 0 16 16"><polyline points="3,9 7,13 13,4" fill="none" stroke="#fff" stroke-width="2"/></svg>
            </span>
            <span class="quiz-checkbox-service-icon">${SERVICE_ICONS[block.key][i]||''}</span>
            <span>
              <span class="quiz-checkbox-service-name">${s.name}</span>
              <span class="quiz-checkbox-service-desc">${s.desc}</span>
            </span>
          </label>
        `).join('')}
      </div>
      <button type="button" class="quiz-add-block-btn" id="quiz-add-block">–î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥–∏ –∏–∑ –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π</button>
      <button type="submit" class="quiz-next-btn">–î–∞–ª–µ–µ</button>
    </form>
  `;
  // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥
  const form = quizStepContainer.querySelector('#quiz-services-form');
  form.addEventListener('submit', e => {
    e.preventDefault();
    const checked = Array.from(form.elements['service']).filter(cb => cb.checked).map(cb => +cb.value);
    quizState.selectedBlocks[0].services = checked;
    renderQuizStep3();
  });
  // –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –±–ª–æ–∫–∏
  quizStepContainer.querySelector('#quiz-add-block').addEventListener('click', () => {
    // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
    const checked = Array.from(form.elements['service']).filter(cb => cb.checked).map(cb => +cb.value);
    quizState.selectedBlocks[0].services = checked;
    renderQuizAddBlock();
  });
}

// --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –±–ª–æ–∫–æ–≤ ---
function renderQuizAddBlock() {
  // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –±–ª–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã—Ö –µ—â—ë –Ω–µ—Ç
  const used = quizState.selectedBlocks.map(b => b.key);
  const available = QUIZ_BLOCKS.filter(b => !used.includes(b.key));
  quizStepContainer.innerHTML = `
    <div class="quiz-step-title">–î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥–∏ –∏–∑ –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π</div>
    <div class="quiz-options">
      ${available.map(b => `<button class="quiz-option-btn" data-block="${b.key}">${b.label}</button>`).join('')}
    </div>
    <button class="quiz-next-btn" id="quiz-add-block-cancel">–ù–∞–∑–∞–¥</button>
  `;
  quizStepContainer.querySelectorAll('.quiz-option-btn').forEach(btn => {
    btn.addEventListener('click', () => {
      quizState.selectedBlocks.push({ key: btn.getAttribute('data-block'), services: [] });
      renderQuizMultiBlockServices();
    });
  });
  quizStepContainer.querySelector('#quiz-add-block-cancel').addEventListener('click', renderQuizStep2);
}

// --- –í—ã–±–æ—Ä —É—Å–ª—É–≥ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –±–ª–æ–∫–∞—Ö ---
function renderQuizMultiBlockServices() {
  quizStepContainer.innerHTML = quizState.selectedBlocks.map((blockSel, idx) => {
    const block = QUIZ_BLOCKS.find(b => b.key === blockSel.key);
    return `
      <div class="quiz-step-title" style="margin-bottom:10px;">${block.label}</div>
      <form class="quiz-multiblock-form" data-block="${block.key}">
        <div class="quiz-checkbox-list">
          ${block.services.map((s, i) => `
            <label class="quiz-checkbox-label">
              <input type="checkbox" name="service" value="${i}" ${blockSel.services && blockSel.services.includes(i) ? 'checked' : ''}>
              <span class="quiz-checkbox-custom">
                <svg width="16" height="16" viewBox="0 0 16 16"><polyline points="3,9 7,13 13,4" fill="none" stroke="#fff" stroke-width="2"/></svg>
              </span>
              <span class="quiz-checkbox-service-icon">${SERVICE_ICONS[block.key][i]||''}</span>
              <span>
                <span class="quiz-checkbox-service-name">${s.name}</span>
                <span class="quiz-checkbox-service-desc">${s.desc}</span>
              </span>
            </label>
          `).join('')}
        </div>
      </form>
    `;
  }).join('') + `
    <button type="button" class="quiz-add-block-btn" id="quiz-add-block">–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë</button>
    <button type="button" class="quiz-next-btn" id="quiz-multiblock-next">–î–∞–ª–µ–µ</button>
  `;
  // –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ–∫–±–æ–∫—Å–æ–≤
  quizStepContainer.querySelectorAll('.quiz-multiblock-form').forEach(form => {
    const blockKey = form.getAttribute('data-block');
    form.addEventListener('change', () => {
      const checked = Array.from(form.elements['service']).filter(cb => cb.checked).map(cb => +cb.value);
      const blockSel = quizState.selectedBlocks.find(b => b.key === blockKey);
      blockSel.services = checked;
    });
  });
  quizStepContainer.querySelector('#quiz-add-block').addEventListener('click', () => {
    // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
    quizStepContainer.querySelectorAll('.quiz-multiblock-form').forEach(form => {
      const blockKey = form.getAttribute('data-block');
      const checked = Array.from(form.elements['service']).filter(cb => cb.checked).map(cb => +cb.value);
      const blockSel = quizState.selectedBlocks.find(b => b.key === blockKey);
      blockSel.services = checked;
    });
    renderQuizAddBlock();
  });
  quizStepContainer.querySelector('#quiz-multiblock-next').addEventListener('click', renderQuizStep3);
}

// --- –®–∞–≥ 3: —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏ ---
function renderQuizStep3() {
  if (!quizState.phoneCountry) quizState.phoneCountry = 'BY';
  quizStepContainer.innerHTML = `
    <div class="quiz-step-title">–ö–∞–∫ –≤–∞–º —É–¥–æ–±–Ω–µ–µ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç?</div>
    <form id="quiz-contact-form">
      <div class="quiz-contact-methods">
        ${[
          {v:'sms',t:'–°–ú–° –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω'},
          {v:'call',t:'–ü–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å'},
          {v:'tg',t:'–ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram'},
          {v:'vk',t:'–ù–∞–ø–∏—Å–∞—Ç—å –≤ –í–ö'},
          {v:'wa',t:'–ù–∞–ø–∏—Å–∞—Ç—å –≤ WhatsApp'},
          {v:'viber',t:'–ù–∞–ø–∏—Å–∞—Ç—å –≤ Viber'},
          {v:'email',t:'–ü—Ä–∏—Å–ª–∞—Ç—å –Ω–∞ –ø–æ—á—Ç—É'}
        ].map(opt => `
          <label class="quiz-contact-radio">
            <input type="radio" name="contact" value="${opt.v}" ${quizState.contactMethod===opt.v?'checked':''}>
            ${CONTACT_ICONS[opt.v]||''}
            <span>${opt.t}</span>
          </label>
        `).join('')}
      </div>
      <div id="quiz-contact-fields"></div>
      <button type="submit" class="quiz-send-btn">–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ü–µ–Ω—É</button>
    </form>
  `;
  // –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞
  const form = quizStepContainer.querySelector('#quiz-contact-form');
  const radios = form.elements['contact'];
  const fields = quizStepContainer.querySelector('#quiz-contact-fields');
  Array.from(radios).forEach(radio => {
    radio.addEventListener('change', () => renderContactFields(radio.value));
    if (radio.checked) renderContactFields(radio.value);
  });
  form.addEventListener('submit', e => {
    e.preventDefault();
    quizState.contactMethod = form.elements['contact'].value;
    quizState.contactValue = form.elements['contactValue'] ? form.elements['contactValue'].value : '';
    quizState.contactNick = form.elements['contactNick'] ? form.elements['contactNick'].value : '';
    quizState.phoneCountry = form.elements['phoneCountry'] ? form.elements['phoneCountry'].value : quizState.phoneCountry;
    renderQuizSuccess();
  });
}

function renderContactFields(method) {
  const fields = document.getElementById('quiz-contact-fields');
  if (method === 'sms' || method === 'call') {
    let country = quizState.phoneCountry || 'BY';
    let countryObj = ALL_PHONE_COUNTRIES.find(c=>c.code===country) || ALL_PHONE_COUNTRIES[0];
    const countries = getPhoneCountriesSorted();
    fields.innerHTML = `
      <div class="quiz-contact-fields-row">
        <div class="flag-dropdown" id="flag-dropdown">
          <div class="flag-dropdown__selected" tabindex="0">
            <img src="https://cdn.jsdelivr.net/npm/svg-country-flags@1.2.10/svg/${country.toLowerCase()}.svg" alt="${country}">
          </div>
          <div class="flag-dropdown__list">
            ${countries.map(c=>`
              <div class="flag-dropdown__item${c.code===country?' selected':''}" data-code="${c.code}">
                <img src="https://cdn.jsdelivr.net/npm/svg-country-flags@1.2.10/svg/${c.code.toLowerCase()}.svg" alt="${c.code}">
              </div>
            `).join('')}
          </div>
        </div>
        <input type="text" class="quiz-contact-input" value="${countryObj.dial}" readonly tabindex="-1">
        <input type="tel" class="quiz-contact-input phone-mask" name="contactValue" placeholder="${countryObj.mask}" maxlength="20">
      </div>
    `;
    // –ö–∞—Å—Ç–æ–º–Ω—ã–π dropdown
    const dropdown = fields.querySelector('#flag-dropdown');
    const selected = dropdown.querySelector('.flag-dropdown__selected');
    const list = dropdown.querySelector('.flag-dropdown__list');
    selected.addEventListener('click', () => {
      dropdown.classList.toggle('open');
      if (dropdown.classList.contains('open')) {
        // –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ñ–ª–∞–≥—É
        const sel = list.querySelector('.flag-dropdown__item.selected');
        if (sel) sel.scrollIntoView({block:'nearest'});
      }
    });
    selected.addEventListener('blur', () => {
      setTimeout(()=>dropdown.classList.remove('open'), 120);
    });
    list.querySelectorAll('.flag-dropdown__item').forEach(item => {
      item.addEventListener('click', () => {
        quizState.phoneCountry = item.getAttribute('data-code');
        dropdown.classList.remove('open');
        renderContactFields(method);
      });
    });
    // IMask
    const input = fields.querySelector('.phone-mask');
    if (window.IMask) {
      IMask(input, IMASK_PHONE[country] || IMASK_PHONE['BY']);
    }
    if (quizState.contactValue && quizState.phoneCountry === country) input.value = quizState.contactValue;
    input.focus();
  } else if (["tg","vk","wa","viber"].includes(method)) {
    fields.innerHTML = `<input type="text" class="quiz-contact-input" name="contactValue" placeholder="–í–∞—à –Ω–∏–∫ –∏–ª–∏ –Ω–æ–º–µ—Ä" required>` +
      `<input type="text" class="quiz-contact-input" name="contactNick" placeholder="–í–∞—à–µ –∏–º—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)">`;
    if (quizState.contactValue) fields.querySelector('[name="contactValue"]').value = quizState.contactValue;
    if (quizState.contactNick) fields.querySelector('[name="contactNick"]').value = quizState.contactNick;
    fields.querySelector('[name="contactValue"]').focus();
  } else if (method === 'email') {
    fields.innerHTML = `<input type="email" class="quiz-contact-input" name="contactValue" placeholder="–í–∞—à e-mail" required>`;
    if (quizState.contactValue) fields.querySelector('[name="contactValue"]').value = quizState.contactValue;
    fields.querySelector('[name="contactValue"]').focus();
  } else {
    fields.innerHTML = '';
  }
}

// --- –§–∏–Ω–∞–ª: –∏–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ ---
function renderQuizSuccess() {
  // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
  const selectedBlocks = quizState.selectedBlocks.map(blockSel => {
    const block = QUIZ_BLOCKS.find(b => b.key === blockSel.key);
    return {
      category: block ? block.label : blockSel.key,
      services: (blockSel.services || []).map(i => block.services[i]?.name).filter(Boolean)
    };
  });
  const data = {
    categories: selectedBlocks.map(b => b.category).join(', '),
    services: selectedBlocks.map(b => b.services.join('; ')).join(' | '),
    contactMethod: quizState.contactMethod,
    contactValue: quizState.contactValue,
    contactNick: quizState.contactNick || '',
    phoneCountry: quizState.phoneCountry || ''
  };
  fetch('https://formspree.io/f/mjkrpvzp', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
    body: JSON.stringify(data)
  })
  .then(r => r.ok ? r.json() : Promise.reject(r))
  .then(() => {
    quizStepContainer.innerHTML = `<div class="quiz-success">–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.<br>–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.</div>`;
    setTimeout(closeQuiz, 2200);
  })
  .catch(() => {
    quizStepContainer.innerHTML = `<div class="quiz-success" style="color:#f00">–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –Ω–∞–ø—Ä—è–º—É—é.</div>`;
    setTimeout(closeQuiz, 3500);
  });
} 